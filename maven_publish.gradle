import org.gradle.api.internal.artifacts.dependencies.DefaultProjectDependency

apply plugin: 'maven-publish'
apply plugin: 'signing'
def EMPTY = 'unspecified'
def NULL = null

if (project.hasProperty("android")) {
    // Android libraries
    tasks.register('sourcesJar', Jar) {
        archiveClassifier.set('sources')
        from android.sourceSets.main.java.source

        exclude "**/R.class"
        exclude "**/BuildConfig.class"
    }
} else {
    // Java libraries
    tasks.register('sourcesJar', Jar) {
        dependsOn classes
        archiveClassifier.set('sources')
        from sourceSets.main.allSource
    }

    Task javadoc = tasks.named("javadoc").get()
    Task javadocJar = tasks.register('javadocJar', Jar) {
        archiveClassifier.set('javadoc')
        from javadoc
    }.get()
    javadocJar.dependsOn(javadoc)
}

ext["signing.keyId"] = ''
ext["signing.password"] = ''
ext["signing.secretKeyRingFile"] = ''
ext["ossrhUsername"] = ''
ext["ossrhPassword"] = ''

File secretPropsFile = project.rootProject.file('local.properties')
if (secretPropsFile.exists()) {
    println "Found secret props file, loading props"
    Properties p = new Properties()
    p.load(new FileInputStream(secretPropsFile))
    p.each { name, value ->
        ext[name] = value
    }
} else {
    println "No props file, loading env vars"
}

publishing {
    def prjName = project.name.split(":").last()
    publications {
        release(MavenPublication) {
            groupId project.ext.sdk["group"]
            artifactId project.ext.sdk[prjName]["artifact"]
            version project.ext.sdk[prjName]["version"]

            if (project.ext.sdk[prjName]["source"]){
                artifact sourcesJar
            }
            if (project.hasProperty("android")) {
                artifact("$buildDir/outputs/aar/${project.getName()}-release.aar")
            } else {
                artifact javadocJar
                artifact("$buildDir/libs/${project.getName()}.jar")
            }

            pom {
                if (project.hasProperty("android")) {
                    packaging 'aar'
                } else {
                    packaging 'jar'
                }
                name = project.ext.sdk[prjName]["libraryName"]
                description = project.ext.sdk[prjName]["libraryDescription"]
                url = project.ext.sdk["siteUrl"]
                licenses {
                    license {
                        name = project.ext.sdk["licenseName"]
                        url = project.ext.sdk["licenseUrl"]
                    }
                }
                developers {
                    developer {
                        id = project.ext.sdk["developerId"]
                        name = project.ext.sdk["developerName"]
                        email = project.ext.sdk["developerEmail"]
                    }
                }
                scm {
                    connection = project.ext.sdk["gitUrl"]
                    developerConnection = project.ext.sdk["gitUrl"]
                    url = project.ext.sdk["siteUrl"]
                }
                withXml {
                    def map = []
                    def containers = [configurations.api, configurations.implementation]
                    def dependenciesNode = asNode().appendNode('dependencies')
                    containers.each { container ->
                        container.dependencies.each { dependency ->
                            println("pom 清单包含：   ${dependency.group}:${dependency.name}:${dependency.version}")
                            if (dependency instanceof DefaultProjectDependency) {
                                def dependencyNode = dependenciesNode.appendNode('dependency')
                                dependencyNode.appendNode('groupId', project.ext.sdk["group"])
                                dependencyNode.appendNode('artifactId', project.ext.sdk[dependency.name]["artifact"])
                                dependencyNode.appendNode('version', project.ext.sdk[dependency.name]["version"])
                                dependencyNode.appendNode('scope', container.name)
                            } else if ((dependency.group != NULL && dependency.group != EMPTY) && (dependency.name != NULL && dependency.name != EMPTY) && (dependency.version != NULL && dependency.name != EMPTY)) {
                                def key = dependency.group + ":" + dependency.name + ":" + dependency.version
                                if (!map.contains(key)) {
                                    map.add(key)
                                    def dependencyNode = dependenciesNode.appendNode('dependency')
                                    dependencyNode.appendNode('groupId', dependency.group)
                                    dependencyNode.appendNode('artifactId', dependency.name)
                                    dependencyNode.appendNode('version', dependency.version)
                                    dependencyNode.appendNode('scope', container.name)
                                }
                            }

                        }
                    }
                }
            }
        }
    }
    repositories {
        maven {
            name = ''
            def releasesRepoUrl = project.ext.sdk["release_url"]
            def snapshotsRepoUrl = project.ext.sdk["snapshot_url"]
            url = project.ext.sdk[prjName]["version"].endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            credentials {
                username ossrhUsername
                password ossrhPassword
            }
        }

        maven {
            url = uri('../repo')
        }
    }
}

signing {
    sign publishing.publications
}

tasks.withType(Sign).configureEach { publishTask ->
    publishTask.dependsOn assemble
}



