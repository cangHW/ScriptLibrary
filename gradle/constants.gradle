import org.gradle.api.internal.artifacts.dependencies.DefaultProjectDependency

ext {

    plugin_configurations_name = [
            configurations.api,
            configurations.implementation,
            configurations.runtimeOnly
    ]

}

interface OnDependencyCheckCallback {
    void onCall(String group, String name, String version, String scope)
}

def parseDependency(Configuration container, ArrayList<String> map, Dependency dependency, OnDependencyCheckCallback callback) {
    if (dependency instanceof DefaultProjectDependency) {
        def group = project.ext.sdk["group"]
        def name = project.ext.sdk[dependency.name]["artifact"]
        def version = project.ext.sdk[dependency.name]["version"]

        def key = group + ":" + name + ":" + version
        if (!map.contains(key)) {
            map.add(key)
            callback.onCall(group, name, version, container.name)
        }
        return
    }

    if (dependency.group == null || dependency.group == "unspecified") {
        return
    }

    if (dependency.name == null || dependency.name == "unspecified") {
        return
    }

    if (dependency.version == null || dependency.version == "unspecified") {
        return
    }

    def key = dependency.group + ":" + dependency.name + ":" + dependency.version
    if (!map.contains(key)) {
        map.add(key)
        callback.onCall(dependency.group, dependency.name, dependency.version, container.name)
    }
}


rootProject.metaClass.parseDependencyWhenCreatePom = { project, callback ->
    def map = []
    project.ext.plugin_configurations_name.each { container ->
        container.dependencies.each { dependency ->
            println("pom 清单包含：   ${dependency.group}:${dependency.name}:${dependency.version}")
            parseDependency(container, map, dependency, callback)
        }
    }
}