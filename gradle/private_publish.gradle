
// 1、检测涉及到的源码依赖项并记录
import org.gradle.api.internal.artifacts.dependencies.DefaultProjectDependency

def group_config = 'config'

def listDependencies(Project project, Map localMap) {
    project.configurations.configureEach { it ->
        it.dependencies.each { dependency ->
            if (dependency instanceof DefaultProjectDependency) {
                DefaultProjectDependency dep = dependency
                if (localMap[dep.dependencyProject.name] == null) {
                    localMap[dep.dependencyProject.name] = dep.dependencyProject.getPath()
                    listDependencies(dep.dependencyProject, localMap)
                }
            }
        }
    }
}

Task findDependencies = tasks.register("findDependencies").get().doLast {
    def localMap = [:]
    localMap[project.name] = project.getPath()
    listDependencies(project, localMap)

    File file = new File(project.rootDir.absolutePath, "Plugins/upload/" + project.name + ".txt")
    file.getParentFile().mkdirs()
    file.delete()
    file.createNewFile()

    FileWriter writer = new FileWriter(file)
    localMap.entrySet().forEach {
        writer.write(it.value + "\n")
    }
    writer.flush()
    writer.close()
}
findDependencies.setGroup(group_config)



// 2、构建并上传 maven
apply from: new File(project.rootDir.absolutePath, "Plugins/script/gradle/constants.gradle").absolutePath

apply plugin: 'maven-publish'

tasks.register('sourcesJar', Jar) {
    archiveClassifier.set('sources')
    from android.sourceSets.main.java.source

    exclude "**/R.class"
    exclude "**/BuildConfig.class"
}

publishing {
    def prjName = project.name.split(":").last()
    publications {
        upload(MavenPublication) {
            groupId project.ext.sdk["group"]
            artifactId project.ext.sdk[prjName]["artifact"]
            version project.ext.sdk[prjName]["version"]

            if (project.ext.sdk[prjName]["source"]){
                artifact sourcesJar
            }
            artifact("$projectDir/build/outputs/aar/${prjName}-release.aar")

            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')

                rootProject.parseDependencyWhenCreatePom(project) { group, name, version, scope ->
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', group)
                    dependencyNode.appendNode('artifactId', name)
                    dependencyNode.appendNode('version', version)
                    dependencyNode.appendNode('scope', scope)
                }
            }
        }

        tasks.withType(PublishToMavenRepository).configureEach { publishTask ->
            publishTask.dependsOn assembleRelease
        }
    }

    repositories {
        maven {
            def releasesRepoUrl = project.ext.sdk["release_url"]
            def snapshotsRepoUrl = project.ext.sdk["snapshot_url"]
            url = project.ext.sdk[prjName]["version"].endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            credentials {
                username project.ext.sdk[prjName]["username"]
                password project.ext.sdk[prjName]["password"]
            }
        }

        maven {
            url = uri("${rootDir}/Repo")
        }
    }
}
